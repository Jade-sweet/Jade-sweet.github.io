{"pages":[],"posts":[{"title":"JS应用","text":"1. 原生JS1.1 DOM操作节点操作 - 获取节点1.直接获取节点 a.通过标签的id值来获取指定的标签: document.getElementById(id值)b.通过标签名来获取指定的标签: document.getElementsByTagName(标签名)c.通过类名来获取指定的标签: document.getElementsByClassName(类名)d.通过name属性的值来获取指定的标签(了解): document.getElementsByName(‘username’) 2.获取父节点 a.获取子节点对应的父节点: 子节点.parentElement 3.获取子节点 a.获取所有的子节点: 父节点.children / 父节点.childNodesb.获取第一个子节点: 父节点.firstElementChildc.获取最后一个子节点: 父节点.lastElementChild 节点操作 - 创建添加和删除1.创建节点: document.createElement(标签名) 2.添加节点: 父节点.appendChild(需要添加的节点) / 父节点.insertBefore(新节点, 指定节点) 3.删除节点: 父节点.removeChild(子节点) / 节点.remove() 4.拷贝节点: 节点.cloneNode() / 节点.cloneNode(true) 5.替换节点: 父节点.replaceChild(新节点, 子节点) 练习: 删除广告、动态添加和删除 作业: 成都汽车限号查询 1.2 BOM操作1.window基本操作 a.打开新窗口：window.open(网页地址) / window.open(‘’,’’,’width=x?,height=y?’) b.关闭窗口: window.close() c.移动当前窗口: 窗口对象.moveTo(x坐标, y坐标) d.获取浏览器的宽度和高度: window.innerWidth, window.innerHeight / window.outerWidth, window.outerHeight 2.弹框 a. alert(提示信息) - 弹出提示信息(带确定按钮) b. confirm(提示信息) - 弹出提示信息(带确定和取消按钮),返回值是布尔值，取消-false, 确定-true c. prompt(提示信息,输入框中的默认值) - 弹出一个带输入框和取消，确定按钮的提示框; 点取消，返回值是null;点确定返回值是输入框中输入的内容 3.定时 a. setInterval(函数,时间) / clearInterval(定时对象) b. setTimeout(函数,时间) / clearTimeout(定时对象) 1.3 事件1.事件绑定 a. 在标签内部给事件源的事件属性赋值 b. 通过节点绑定事件1: 标签节点.事件属性 = 函数 c. 通过节点绑定事件2: 标签节点.事件属性 = 匿名函数 d. 通过节点绑定事件3: 节点.addEventListener(事件名,函数) 2.常见事件类型 a..onload - 页面加载完成对应的事件(标签加载成功) window.onload = 函数 b.鼠标事件: onclick / onmouseover / onmouseout c.键盘事件: onkeypress / onkeydown / onkeyup d.输入框内容改变: ‘onchange’ - 输入框输入状态结束 3.事件捕获 事件对象.stopPropagation() 2. jQuery2.1 基本操作===========节点============= 1.获取节点 $(选择器) console.log($(‘#div2&gt;a’)) //和后代选择器效果一样 console.log($(‘p + a’)) //获取紧跟着p标签的a标签 console.log($(‘#p1~*’)) //获取和id是p1的标签的后面的所有同级标签 console.log($(‘div:first’)) //第一个div标签 console.log($(‘p:last’)) //最后一个p标签 console.log($(‘div *:first-child’)) //找到所有div标签中的第一个子标签 2.创建标签 $(‘HTML标签语法’) ,例如：$(‘我是div‘) 3.添加标签 父标签.append(子标签) - 在父标签的最后添加子标签 父标签.prepend(子标签) - 在父标签的最前面添加子标签 标签.before() 标签.after() 4.删除标签 标签.empty() - 清空指定标签 标签.remove() - 删除指定标签 ==============属性================ 1.普通属性的获取和修改 - 除了innerHTML(html), innerText(text)以及value(val) 标签.attr(属性名) - 获取指定的属性值 标签.attr(属性名, 值) - 修改/添加属性 //2.标签内容属性// 双标签.html()// 双标签.text()// 单标签.val()//注意：上面的函数不传参就是获取值，传参就是修改值 2.class属性 - HTML中一个标签可以有多个class值，多个值用空格隔开 标签.addClass(class值) - 给标签添加class值 标签.removeClass(class值) - 移除标签中指定的class值 3.样式属性 a.获取属性值 标签.css(样式属性名) - 获取样式属性值 b.修改和添加 标签.css(样式属性名, 值) - 修改属性值 标签.css({属性名:值, 属性名2:值2…}) - 同时设置多个属性 ==============事件============= 1.标签.on(事件名,回调函数) - 给标签绑定指定的事件（和js中的addEventLinsenner一样） 事件名不需要要on 2.父标签.on(事件名,选择器,回调函数) - 在父标签上添加事件，传递给选择器对应的子标签 选择器 - 前面标签的后代标签(子标签/子标签的子标签) 2.2 Ajax语法： ​ 1.get请求 ​ $.get(url,data,回调函数,返回数据类型) ​ - url：请求地址（字符串） ​ - data：参数列表 (对象) ​ - 回调函数：请求成功后自动调用的函数(函数名，匿名函数) ​ - 返回数据类型：请求到的数据的格式(字符串，例如：’json’) ​ ​ 2.post请求 ​ $.post(url,data,回调函数,返回数据类型) ​ - url：请求地址（字符串） ​ - data：参数列表 (对象) ​ - 回调函数：请求成功后自动调用的函数(函数名，匿名函数) ​ - 返回数据类型：请求到的数据的格式(字符串，例如：’json’) ​ ​ 3.ajax ​ $.ajax({ ​ ‘url’:请求地址, ​ ‘data’:{参数名1:值1, 参数名2:值2}， ​ ‘type’:’get’/‘post’, ​ ‘dataType’:返回数据类型, ​ ‘success’:function(结果){ ​ 请求成功后要做的事情 ​ } ​ }) 3. Vue.jsvar 变量名 = new Vue({ ​ el: 选择器, ​ data:数据对象, ​ methods:方法对象， ​ computed:计算属性 }) 设置标签内容: 设置标签属性值: v-bind:属性=’Vue属性名’ if语句：v-if=’Vue属性名’ 循环结构：v-for=’变量 in 数组属性’ 绑定事件：v-on:事件名=’函数名’ v-model可是实现 C的内容和属性双向绑定","link":"/2019/10/23/JS%E5%BA%94%E7%94%A8/"},{"title":"git常用指令","text":"这里面是关于git的一些基本语法 1.基本指令git init &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 新建git仓库git add 文件/文件夹 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 将文件添加到缓存区中git add -A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中git status &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——— 查看git状态git commit -m ‘提交信息’ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 将缓存区中的内容全部提交到git本地仓库中 git log &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——- 查看提交日志 git reset -- hard HEAD &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 让工作目录中的内容和仓库中的内容保持一致git reset --hard HEAD^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到上一个版本git reset -- hard 版本号 —— 回到指定的版本git checkout 文件名 —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态) git clone &lt;url&gt; - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥) git remote add origin 地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次) git push [-u] origin master —– 提交(-u在第一次提交分支的时候才用) git push — 将本地仓库的内容提交到远程仓库master分支上 git push origin 分支名 — 将本地仓库的内容提交到远程仓库对应的分支上, 如果分支不存在会自动创建 git pull — 将远程仓库中的内容更新到本地仓库和工作区中 2.分之管理创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发) git branch [-a] - 查看分之git branch 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之git checkout 分支名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 切换分之git checkout -b 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 切换并创建新的分之git diff 分之1 分之2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异git merge 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)","link":"/2019/10/23/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"},{"title":"常用Linux系统指令","text":"命令名称 [命名参数][命令对象] 一、日常操作 1.cd指令 - 进入指定文件夹 cd 目录 - 进入指定目录(也可以是文件夹对应的路径) ​ ~相对路径 — 绝对路径 cd .. - 返回上层目录 cd ~ - 回到根目录 cd / - 进入系统根目录 \\2. ls指令 - 查看当前目录中的内容 ls ls -l/-lh - 查看详情 ls -a - 隐藏文件也一起显示 ls -R - 递归显示所有内容 ls -S/-t - 按大小/时间排序 注意: 多个功能不冲突的参数可以同时使用，中间用空格隔开, 例如 - (ls -lh -S) 3.pwd指令 - 显示当前完整目录 pwd 4.文件操作指令 touch 文件名 - 新建文件 cat 文件名 - 查看文件内容 vim/vi 文件名 -打开文件 rm 文件名 - 删除文件(询问是否删除) rm -f 文件名 - 强制删除文件(不询问) rm - r 目录 - 删除文件夹 rm -rf 目录、 rm -r -f 目录 - 删除文件夹(不询问) cp 文件名1 文件名2 - 将文件1中的内容拷贝到文件2中 cp 文件 目录 - 将指定文件拷贝到指定目录中 cp -r 文件名/目录名 目录2 - 将文件/目录拷贝到目录2中 mv 文件名1 文件名2 - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名） mv 文件1路径 文件2路径 mv 文件名1 新文件名 - 重命名 mv 文件名1 文件目录 - 将文件1移动到指定目录中 注意: mv指令不能加-r来操作目录 (注意：cp/mv/rm 后面可以跟： -i询问 -f强制 -n不覆盖) mkdir 目录名 - 新建文件夹 mkdir -p a/b/c - 按层级创建a,b,c三个文件夹 mkdir -p a/{b,c}/{d,e,f} -同一层级常见多个 rmdir 目录名 - 删除指定空目录 7.history - 显示历史指令记录 bashrc 配置显示时间：export HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “ 修改bashrc 后使其生效: source ~/.bashrc 或 . .bashrc 6.链接 ln -s 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！) ln 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个硬链接(看成一个数据的多个引用)（了解） 注意: 源文件不存在的时候，软件无效，硬链接变成普通文件 8.快捷键 ctr + f - 前进一个字符 ctr + b - 后退一个字符 ctr + a - 回到行首 ctr + e - 回到行尾 ctr + w - 向左删除一个单词 ctr + u - 向左删除全部 ctr + k - 向右删除全部 ctr + y - 粘贴上次删除的内容 ctr + l - 清屏 二、进程相关指令(用得较少) 1.ps指令 ps - 进程状态 ps -aux 或者 ps ex - 查看进程 ps -aux|grep 进程名 - 查看指定进程 ps grep 进程ID 2.top指令 top - 动态监控进程 top -p PID1,PID2,…. - 动态监控指定进程 3.free指令 free -单位 - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g, -k等！ 4.kill指令 kill 进程号 - 杀死指定的进程 kill -1/-9/-15 进程号 - -1(HUP)不间断重启，-9(KILL)强制杀死进程, -15(TERM)正常终止进程 pkill 进程名 - 按名字处理进程 killall 进程名 - 处理名字匹配的进程 5.uptime - 查看系统状态 三、权限管理 1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多) users - 查看当前用户 groups - 查看当前分组 groupadd 分组名 - 添加分组 (能在/etc/group文件中查看到新的分组, root才有的权限) useradd 用户名 - 创建新的用户(还是在home中自动创建这个用户对应的文件夹， root才有的权限) useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名 - 创建一个用户添加到指定的分组中(在home创建相应的文件夹) usermod -G 分组列表 用户名 - 修改分组(root才有的权限) passwd 用户名 - 修改密码（root才有权限） passwd - 修改当前账号密码 su 用户名 - 切换用户身份(root不需要密码，其他用户需要密码) sudo - 以管理员执行其他程序 注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序 ​ b.在centOS中需要先执行vi 指令进入/etc/sudoers文件中在指定的位置添加内容 ​ ## Allow root to run any commands anywhere ​ root ALL=(ALL) ALL ​ xiaoming ALL=(ALL) ALL (自己添加的，xiaoming是用户名) 2.chmod(记住！) chmod 权限值 文件 - 修改指定文件的权限 chmod [a,u,g,o][+,-][r,w,x] 文件 - 为指定文件，给所有用户添加相应的权限 ​ (a:所有，u:自己，g:同组，o:其他； ​ +：添加， -: 取消； ​ r:读，w:写，x:执行) chown 用户名 文件 - 改变文件所有者 ![file-mode.png](/Users/yuting/Library/Application Support/typora-user-images/17C12B13-6680-4C3A-8E21-C9C9250DEAE1/file-mode.png) (权限制是三组二进制值) self group other rwx rwx rwx 111 101 001 - 自己读写可执行，同一分组的只读可执行，其他的只可执行 110 100 000 chmod 644 文件 chmod 777 文件 chmod 666 文件 三、日志管理 1.cat指令 cat 文件 - 查看文件内容 2.查看部分 head -n N 文件 - 查看前N行内容 tail -n N 文件 - 查看后N行内容 3. less 文件 ​ - 按 j 向下 ​ - 按 k 向上 ​ - 按 f 向下翻屏 ​ - 按 b 向上翻屏 ​ - 按 g 到全文开头 ​ - 按 G 到全文结尾 ​ - 按 Q 退出 more [-N] 文件 - 和less差不多，这个是尽可能多，less是尽可能少的加载 4.处理(对通过其他指令获取的结果进行处理) sort - 排序 (cat 文件 |sort) uniq - 去重 (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用: |sort|uniq awk ‘{print $N}’ - 打印第N列的内容(netstat -natp|awk ‘{print $4}’) awk ‘{print $N1,$N2,$N3,…}’ history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3 -获取历史指令中，使用最频繁的三个指令 uniq ‐c -去重的时候统计每一行内容的重复出现的次数 sort -nk 1 - 数值大小从小到大排序 sort -nk 2 - 字符大小从小到大排序(默认) sort -rnk 1 - 数值大小从大到小排序 sort -rnk 2 - 字符大小从大到小排序(默认) 5.重定向 执行获取数据的指令 &gt; 文件 （将执行指定的结果存储到文件中 - 覆盖原文件中内容） 执行获取数据的指令 &gt;&gt; 文件 (将执行指定的结果存储到文件中 - 在原文件的最后追加) 5.统计 wc -c(字符)/-w(单词)/-l(行) 文件 6.查找 grep 查看对象 目录/文件 参数 ​ ​ 参数： ​ -i 忽略大小写: grep you bb.txt -i ​ -n 显示行标号： grep you bb.txt -n / grep you bb.txt -i -n ​ -E 通过正则表达式匹配: grep -E ‘正则表达式’ 文件 ​ 注意： Linux中，正则不支持: \\d, \\s,\\w,\\b,\\D,\\S,\\W,\\B ​ 支持：. +, *, ?, {N,M}, [], ^, $ ​ -v 忽略字段: grep you bb.txt -v (在bb.txt中找不包含you的所有行) ​ grep -E ‘[0-9]+.[0-9]+’ abb.txt -v ​ -rn 递归查找目录，并打印行号 ​ grep -r you ./ (在当前文件夹下中所有文件中去找包行’you’的行) ​ ​ // 对文件格式进行约束 ​ —include=‘.py’ 仅包含 py文件: grep -r you ./ –include=‘.txt’ ​ —exclude=‘.js’ 不包含 js 文件: grep -r you ./ –exclude=’.c’ ​ 例如： ​ grep you bb.txt ​ grep you bb.txt -i ​ grep you bb.txt -i -n ​ grep -E ‘[0-9]+’ bb.txt // 在文件夹下找满足条件的文件 find DIR -name ‘.xxx’ 找到目录下所有名字匹配的文件: find a1 -name ‘.txt’(在文件夹a1中找所有txt文件) find 路径 -size +/-文件大小 例如: find ./ +20k (在当前目录下找文件大小大于20k的文件) ​ 例：find ./ -size +20k -size -100k -name ‘*.txt’ (找当前目录下大于20k并且小于100k的所有txt文件) // 查指令 which 指令 - 精确查找当前可执行的指令 whereis 指令 - 查找所有匹配的命令 man 指令 -使用指令手册 四、网络管理 ifconfig 查看网卡状态 netstat -natp - 查看网络连接状态 netstat -natp|grep 端口号 - 查看指定端口的网络连接状态 *ping 地址 ping -i 时间 地址 ping -c 次数 地址 telnet ip地址 端口 - 查看远程主机网络连接状况（需要telnet环境） dig 地址 - 查看DNS (需要环境支持) ** wget 地址 - 下载 五、使用包管理工具(掌握) 包管理工具：yum yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info ：显示软件包的相关信息，例如yum info nginx。 源代码构建安装 wget 安装包的路径 -下载安装包 gunzip/tar 压缩包 - 解压、解归档 (设置安装路径) cd 安装包目录 执行: make &amp;&amp; make install -编译安装包程序 给可执行文件添加软连接到usr/bin目录下 -添加快捷方式 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar 发送远程文件 - scp指令： scp 文件 root@IP地址:服务器上保存被发送文件的路径","link":"/2019/10/23/%E5%B8%B8%E7%94%A8Linux%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A4/"}],"tags":[],"categories":[]}